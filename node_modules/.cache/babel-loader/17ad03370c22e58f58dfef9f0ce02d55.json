{"ast":null,"code":"var _jsxFileName = \"/Users/bashirsalisusidi/Documents/DEV/Found&Seek/Bookingoverview/src/components/CalenderComponent.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types'; //import moment from 'moment'\n//import 'moment/locale/zh-cn';\n// import 'antd/lib/style/index.less';     //Add this code for locally example\n\nimport Scheduler, { SchedulerData, ViewTypes, DATE_FORMAT, DemoData } from '../src/index';\nimport Nav from './Nav';\nimport Tips from './Tips';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props); //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n\n    this.prevClick = schedulerData => {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.nextClick = schedulerData => {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(`You just clicked an event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(`You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(`You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      if (confirm(`Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`)) {\n        let newFreshId = 0;\n        schedulerData.events.forEach(item => {\n          if (item.id >= newFreshId) newFreshId = item.id + 1;\n        });\n        let newEvent = {\n          id: newFreshId,\n          title: 'New event you just created',\n          start: start,\n          end: end,\n          resourceId: slotId,\n          bgColor: 'purple'\n        };\n        schedulerData.addEvent(newEvent);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      if (confirm(`Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`)) {\n        schedulerData.updateEventStart(event, newStart);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      if (confirm(`Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`)) {\n        schedulerData.updateEventEnd(event, newEnd);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      if (confirm(`Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`)) {\n        schedulerData.moveEvent(event, slotId, slotName, start, end);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.onScrollRight = (schedulerData, schedulerContent, maxScrollLeft) => {\n      if (schedulerData.ViewTypes === ViewTypes.Day) {\n        schedulerData.next();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n          viewModel: schedulerData\n        });\n        schedulerContent.scrollLeft = maxScrollLeft - 10;\n      }\n    };\n\n    this.onScrollLeft = (schedulerData, schedulerContent, maxScrollLeft) => {\n      if (schedulerData.ViewTypes === ViewTypes.Day) {\n        schedulerData.prev();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n          viewModel: schedulerData\n        });\n        schedulerContent.scrollLeft = 10;\n      }\n    };\n\n    this.onScrollTop = (schedulerData, schedulerContent, maxScrollTop) => {\n      console.log('onScrollTop');\n    };\n\n    this.onScrollBottom = (schedulerData, schedulerContent, maxScrollTop) => {\n      console.log('onScrollBottom');\n    };\n\n    this.toggleExpandFunc = (schedulerData, slotId) => {\n      schedulerData.toggleExpandStatus(slotId);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData('2017-12-18', ViewTypes.Week);\n\n    _schedulerData.localeMoment.locale('en');\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.events);\n\n    this.state = {\n      viewModel: _schedulerData\n    };\n  }\n\n  render() {\n    const {\n      viewModel\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: [\"Basic example\", /*#__PURE__*/_jsxDEV(ViewSrcCode, {\n            srcCodeUrl: \"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/Basic.js\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 60\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scheduler, {\n          schedulerData: viewModel,\n          prevClick: this.prevClick,\n          nextClick: this.nextClick,\n          onSelectDate: this.onSelectDate,\n          onViewChange: this.onViewChange,\n          eventItemClick: this.eventClicked,\n          viewEventClick: this.ops1,\n          viewEventText: \"Ops 1\",\n          viewEvent2Text: \"Ops 2\",\n          viewEvent2Click: this.ops2,\n          updateEventStart: this.updateEventStart,\n          updateEventEnd: this.updateEventEnd,\n          moveEvent: this.moveEvent,\n          newEvent: this.newEvent,\n          onScrollLeft: this.onScrollLeft,\n          onScrollRight: this.onScrollRight,\n          onScrollTop: this.onScrollTop,\n          onScrollBottom: this.onScrollBottom,\n          toggleExpandFunc: this.toggleExpandFunc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tips, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withDragDropContext(Basic);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/bashirsalisusidi/Documents/DEV/Found&Seek/Bookingoverview/src/components/CalenderComponent.js"],"names":["React","Component","PropTypes","Scheduler","SchedulerData","ViewTypes","DATE_FORMAT","DemoData","Nav","Tips","ViewSrcCode","withDragDropContext","Basic","constructor","props","prevClick","schedulerData","prev","setEvents","events","setState","viewModel","nextClick","next","onViewChange","view","setViewType","viewType","showAgenda","isEventPerspective","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","confirm","newFreshId","forEach","resourceId","bgColor","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","onScrollRight","schedulerContent","maxScrollLeft","Day","scrollLeft","onScrollLeft","onScrollTop","maxScrollTop","console","log","onScrollBottom","toggleExpandFunc","toggleExpandStatus","Week","localeMoment","locale","setResources","resources","state","render","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { PropTypes } from 'prop-types'\r\n//import moment from 'moment'\r\n//import 'moment/locale/zh-cn';\r\n// import 'antd/lib/style/index.less';     //Add this code for locally example\r\nimport Scheduler, { SchedulerData, ViewTypes, DATE_FORMAT, DemoData } from '../src/index'\r\nimport Nav from './Nav'\r\nimport Tips from './Tips'\r\nimport ViewSrcCode from './ViewSrcCode'\r\nimport withDragDropContext from './withDnDContext'\r\n\r\nclass Basic extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\r\n    let schedulerData = new SchedulerData('2017-12-18', ViewTypes.Week);\r\n    schedulerData.localeMoment.locale('en');\r\n    schedulerData.setResources(DemoData.resources);\r\n    schedulerData.setEvents(DemoData.events);\r\n    this.state = {\r\n      viewModel: schedulerData\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { viewModel } = this.state;\r\n    return (\r\n      <div>\r\n        <Nav />\r\n        <div>\r\n          <h3 style={{ textAlign: 'center' }}>Basic example<ViewSrcCode srcCodeUrl=\"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/Basic.js\" /></h3>\r\n          <Scheduler schedulerData={viewModel}\r\n            prevClick={this.prevClick}\r\n            nextClick={this.nextClick}\r\n            onSelectDate={this.onSelectDate}\r\n            onViewChange={this.onViewChange}\r\n            eventItemClick={this.eventClicked}\r\n            viewEventClick={this.ops1}\r\n            viewEventText=\"Ops 1\"\r\n            viewEvent2Text=\"Ops 2\"\r\n            viewEvent2Click={this.ops2}\r\n            updateEventStart={this.updateEventStart}\r\n            updateEventEnd={this.updateEventEnd}\r\n            moveEvent={this.moveEvent}\r\n            newEvent={this.newEvent}\r\n            onScrollLeft={this.onScrollLeft}\r\n            onScrollRight={this.onScrollRight}\r\n            onScrollTop={this.onScrollTop}\r\n            onScrollBottom={this.onScrollBottom}\r\n            toggleExpandFunc={this.toggleExpandFunc}\r\n          />\r\n        </div>\r\n        <Tips />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  prevClick = (schedulerData) => {\r\n    schedulerData.prev();\r\n    schedulerData.setEvents(DemoData.events);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    })\r\n  }\r\n\r\n  nextClick = (schedulerData) => {\r\n    schedulerData.next();\r\n    schedulerData.setEvents(DemoData.events);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    })\r\n  }\r\n\r\n  onViewChange = (schedulerData, view) => {\r\n    schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\r\n    schedulerData.setEvents(DemoData.events);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    })\r\n  }\r\n\r\n  onSelectDate = (schedulerData, date) => {\r\n    schedulerData.setDate(date);\r\n    schedulerData.setEvents(DemoData.events);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    })\r\n  }\r\n\r\n  eventClicked = (schedulerData, event) => {\r\n    alert(`You just clicked an event: {id: ${event.id}, title: ${event.title}}`);\r\n  };\r\n\r\n  ops1 = (schedulerData, event) => {\r\n    alert(`You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`);\r\n  };\r\n\r\n  ops2 = (schedulerData, event) => {\r\n    alert(`You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`);\r\n  };\r\n\r\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\r\n    if (confirm(`Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`)) {\r\n\r\n      let newFreshId = 0;\r\n      schedulerData.events.forEach((item) => {\r\n        if (item.id >= newFreshId)\r\n          newFreshId = item.id + 1;\r\n      });\r\n\r\n      let newEvent = {\r\n        id: newFreshId,\r\n        title: 'New event you just created',\r\n        start: start,\r\n        end: end,\r\n        resourceId: slotId,\r\n        bgColor: 'purple'\r\n      }\r\n      schedulerData.addEvent(newEvent);\r\n      this.setState({\r\n        viewModel: schedulerData\r\n      })\r\n    }\r\n  }\r\n\r\n  updateEventStart = (schedulerData, event, newStart) => {\r\n    if (confirm(`Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`)) {\r\n      schedulerData.updateEventStart(event, newStart);\r\n    }\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    })\r\n  }\r\n\r\n  updateEventEnd = (schedulerData, event, newEnd) => {\r\n    if (confirm(`Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`)) {\r\n      schedulerData.updateEventEnd(event, newEnd);\r\n    }\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    })\r\n  }\r\n\r\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\r\n    if (confirm(`Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`)) {\r\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\r\n      this.setState({\r\n        viewModel: schedulerData\r\n      })\r\n    }\r\n  }\r\n\r\n  onScrollRight = (schedulerData, schedulerContent, maxScrollLeft) => {\r\n    if (schedulerData.ViewTypes === ViewTypes.Day) {\r\n      schedulerData.next();\r\n      schedulerData.setEvents(DemoData.events);\r\n      this.setState({\r\n        viewModel: schedulerData\r\n      });\r\n\r\n      schedulerContent.scrollLeft = maxScrollLeft - 10;\r\n    }\r\n  }\r\n\r\n  onScrollLeft = (schedulerData, schedulerContent, maxScrollLeft) => {\r\n    if (schedulerData.ViewTypes === ViewTypes.Day) {\r\n      schedulerData.prev();\r\n      schedulerData.setEvents(DemoData.events);\r\n      this.setState({\r\n        viewModel: schedulerData\r\n      });\r\n\r\n      schedulerContent.scrollLeft = 10;\r\n    }\r\n  }\r\n\r\n  onScrollTop = (schedulerData, schedulerContent, maxScrollTop) => {\r\n    console.log('onScrollTop');\r\n  }\r\n\r\n  onScrollBottom = (schedulerData, schedulerContent, maxScrollTop) => {\r\n    console.log('onScrollBottom');\r\n  }\r\n\r\n  toggleExpandFunc = (schedulerData, slotId) => {\r\n    schedulerData.toggleExpandStatus(slotId);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  }\r\n}\r\n\r\nexport default withDragDropContext(Basic)\r\n"]},"metadata":{},"sourceType":"module"}